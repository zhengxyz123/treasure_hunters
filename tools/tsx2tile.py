#!/usr/bin/env python3
# Copyright (c) 2025 zhengxyz123
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""Convert *.tsx file generated by Tiled to our own binary tileset format."""


import struct
import sys
from dataclasses import dataclass
from pathlib import Path


@dataclass
class AnimatedTile:
    frame_length: int
    frames: list[int]

    def to_bytes(self) -> bytes:
        return struct.pack(
            f"<HH{len(self.frames)}h",
            self.frame_length,
            len(self.frames),
            *self.frames,
        )


class Tileset:
    def __init__(self) -> None:
        self.tile_width = 0
        self.tile_height = 0
        self.first_index = 1
        self.animated_tiles: list[AnimatedTile] = []

    def to_bytes(self) -> bytes:
        binary = struct.pack("<4sBH", "TILE", 1, self.first_index)
        binary += struct.pack(
            "<3H", self.tile_width, self.tile_height, len(self.animated_tiles)
        )
        for tile in self.animated_tiles:
            binary += tile.to_bytes()
        return binary


def main(in_file: Path, out_file: Path) -> int:
    if in_file.exists() and in_file.is_file():
        print(f"'{in_file}' must be a file")
        return 1
    return 0


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"usage: {sys.argv[0]} [tsx file] [tsb file]")
        sys.exit(1)
    else:
        sys.exit(main(*[Path(arg) for arg in sys.argv[1:]]))
