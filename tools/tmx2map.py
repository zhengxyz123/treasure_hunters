#!/usr/bin/env python3
# Copyright (c) 2025 zhengxyz123
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""Convert *.tmx file generated by Tiled to our own binary tilemap format."""

import struct
import sys
from dataclasses import dataclass
from pathlib import Path

import pytmx


@dataclass
class TileMapObject:
    obj_type: int
    flag: int
    class_name: str
    object_name: str
    data: tuple[int, int, int, int]

    def to_bytes(self) -> bytes:
        binary = struct.pack(
            "<2B8s8s4h",
            self.obj_type,
            self.flag & 0xFF,  # ensure only the lowest 8 bits of flag are used
            (
                self.class_name[:8].encode()
                if len(self.class_name) > 8
                else self.class_name.ljust(8).encode()
            ),
            (
                self.object_name[:8].encode()
                if len(self.object_name) > 8
                else self.object_name.ljust(8).encode()
            ),
            *self.data,
        )
        return binary


@dataclass
class TileMapLayer:
    area: tuple[int, int, int, int]
    data: list[int]

    def to_bytes(self) -> bytes:
        return struct.pack(
            f"<4h{len(self.data)}h",
            *self.area,
            *self.data,
        )


class TileMap:
    def __init__(self) -> None:
        self.objects: list[TileMapObject] = []
        self.layers: list[TileMapLayer] = []

    def to_bytes(self) -> bytes:
        binary = struct.pack("<3sB", b"MAP", 1)
        binary += struct.pack("2H", len(self.objects), len(self.layers))
        for obj in self.objects:
            binary += obj.to_bytes()
        for layer in self.layers:
            binary += layer.to_bytes()
        return binary


def main(in_file: Path, out_file: Path) -> int:
    if in_file.exists() and in_file.is_file():
        print(f"'{in_file}' must be a file")
        return 1
    return 0


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"usage: {sys.argv[0]} [tmx file] [tmb file]")
        sys.exit(1)
    else:
        sys.exit(main(*[Path(arg) for arg in sys.argv[1:]]))
